name: Build and Publish Conda Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 0.1.0)'
        required: true
        type: string
  release:
    types: [published]

jobs:
  lint-recipe:
    name: Lint Conda Recipe
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: '3.11'
          channels: conda-forge,defaults
      
      - name: Install conda-verify and conda-build
        shell: bash -l {0}
        run: |
          conda install -y conda-build conda-verify
      
      - name: Lint recipe with conda-verify
        shell: bash -l {0}
        run: |
          conda-verify conda/meta.yaml
      
      - name: Run conda build in dry-run mode
        shell: bash -l {0}
        run: |
          conda build --check conda

  build-and-publish:
    name: Build and Publish on ${{ matrix.os == 'macos-latest' && 'macOS' || 'Windows' }}
    runs-on: ${{ matrix.os }}
    needs: lint-recipe
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,defaults
      
      - name: Get version
        id: get_version
        shell: bash -l {0}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Update version in meta.yaml
        shell: bash -l {0}
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows needs different sed syntax
            sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" conda/meta.yaml
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS needs different sed syntax
            sed -i "" "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" conda/meta.yaml
          else
            # Linux
            sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" conda/meta.yaml
          fi
      
      - name: Install conda-build and anaconda-client
        shell: bash -l {0}
        run: |
          conda install -y conda-build anaconda-client
      
      - name: Build conda package
        shell: bash -l {0}
        run: |
          # Verify Python version before building
          python --version
          conda build --channel conda-forge conda --output-folder ./conda-bld
      
      - name: Test the built package
        shell: bash -l {0}
        run: |
          # Create a test environment
          conda create -y -n test-env python=${{ matrix.python-version }}
          conda activate test-env
          
          # Verify Python version in test environment
          python --version
          
          # Install the built package
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            PLATFORM="win-64"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            PLATFORM="osx-64"
            # Check if we're on Apple Silicon
            if [[ $(uname -m) == "arm64" ]]; then
              PLATFORM="osx-arm64"
            fi
          else
            PLATFORM="linux-64"
          fi
          
          # Install and test
          conda install -y -c ./conda-bld/$PLATFORM -c conda-forge vectara-ingest
          
          # Verify the package can be imported
          python -c "import core; print('Import test successful')"
      
      - name: List built packages
        shell: bash -l {0}
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            PLATFORM="win-64"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            PLATFORM="osx-64"
            # Check if we're on Apple Silicon
            if [[ $(uname -m) == "arm64" ]]; then
              PLATFORM="osx-arm64"
            fi
          else
            PLATFORM="linux-64"
          fi
          
          # List all files in the output directory
          echo "Contents of ./conda-bld/$PLATFORM:"
          ls -la ./conda-bld/$PLATFORM/
      
      - name: Upload to Anaconda.org
        shell: bash -l {0}
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          # Determine platform
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            PLATFORM="win-64"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            PLATFORM="osx-64"
            # Check if we're on Apple Silicon
            if [[ $(uname -m) == "arm64" ]]; then
              PLATFORM="osx-arm64"
            fi
          else
            PLATFORM="linux-64"
          fi
          
          # Find the .conda package file
          PACKAGE_FILE=$(find ./conda-bld/$PLATFORM -name "vectara-ingest-${{ steps.get_version.outputs.VERSION }}-*.conda" | head -1)
          
          echo "Found package file: $PACKAGE_FILE"
          
          # Upload the package
          anaconda upload --force "$PACKAGE_FILE"

  build-and-publish-redhat:
    name: Build and Publish for Red Hat Linux
    runs-on: ubuntu-latest
    needs: lint-recipe
    container:
      image: quay.io/centos/centos:stream9
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install system dependencies
        run: |
          # Install build dependencies
          yum install -y git wget make gcc

          # Core dependencies
          yum install -y alsa-lib gtk3 libX11-xcb libXcomposite libXcursor libXdamage \
            libXext libXi libXrandr libXtst mesa-libgbm pango cups-libs

          # Fonts
          yum install -y liberation-fonts dejavu-sans-fonts

          # Additional dependencies if available
          yum install -y libcanberra-gtk3 atk || true
      
      - name: Install Miniconda with Python 3.11
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          echo "$HOME/miniconda/bin" >> $GITHUB_PATH
          echo "CONDA_PREFIX=$HOME/miniconda" >> $GITHUB_ENV
          
          # Create base environment with Python 3.11
          source $HOME/miniconda/bin/activate
          conda install -y python=3.11
          
          # Verify Python version
          python --version
      
      - name: Get version
        id: get_version
        run: |
          source $HOME/miniconda/bin/activate
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Update version in meta.yaml
        run: |
          source $HOME/miniconda/bin/activate
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          sed -i "s/{% set version = \".*\" %}/{% set version = \"$VERSION\" %}/" conda/meta.yaml
      
      - name: Install conda-build and anaconda-client
        run: |
          source $HOME/miniconda/bin/activate
          conda install -y conda-build anaconda-client
          conda config --add channels conda-forge
      
      - name: Build conda package
        run: |
          source $HOME/miniconda/bin/activate
          # Verify Python version before building
          python --version
          conda build --channel conda-forge conda --output-folder ./conda-bld
      
      - name: Test the built package
        run: |
          source $HOME/miniconda/bin/activate
          
          # Create a test environment with Python 3.11
          conda create -y -n test-env python=3.11
          conda activate test-env
          
          # Verify Python version in test environment
          python --version
          
          # Install the built package
          conda install -y -c ./conda-bld/linux-64 -c conda-forge vectara-ingest
          
          # Verify the package can be imported
          python -c "import core; print('Import test successful')"
      
      - name: List built packages
        run: |
          source $HOME/miniconda/bin/activate
          
          # List all files in the output directory
          echo "Contents of ./conda-bld/linux-64:"
          ls -la ./conda-bld/linux-64/
      
      - name: Install Firefox for Playwright
        run: |
          source $HOME/miniconda/bin/activate
          # Install playwright and then Firefox browser
          pip install playwright
          playwright install firefox
      
      - name: Upload to Anaconda.org
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          source $HOME/miniconda/bin/activate
          
          # Find the .conda package file
          PACKAGE_FILE=$(find ./conda-bld/linux-64 -name "vectara-ingest-${{ steps.get_version.outputs.VERSION }}-*.conda" | head -1)
          
          echo "Found package file: $PACKAGE_FILE"
          
          # Upload the package
          anaconda upload --force "$PACKAGE_FILE" 